{"ast":null,"code":"import API_URL from '../config';\n\n// Fonction d'inscription avec gestion des erreurs\nexport const signup = async (email, password) => {\n  try {\n    const response = await fetch(`${API_URL}/auth/signup`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    const data = await response.json();\n\n    // Vérifie si l'API a renvoyé une erreur\n    if (!response.ok) {\n      console.error('❌ Erreur d\\'inscription :', data);\n\n      // Récupère tous les messages d'erreur dans un tableau\n      const errorMessage = data.details ? data.details.map(err => err.msg).join(', ') // Concatène les erreurs\n      : data.message; // Si pas de détails, utilise le message général\n\n      return {\n        error: true,\n        message: errorMessage\n      };\n    }\n    return data;\n  } catch (error) {\n    console.error('❌ Erreur réseau lors de l\\'inscription:', error.message);\n    return {\n      error: true,\n      message: \"Erreur lors de l'inscription.\"\n    };\n  }\n};\n\n// Fonction de connexion\nexport const login = async (email, password) => {\n  try {\n    const response = await fetch(`${API_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    const data = await response.json();\n    if (!data.token) {\n      return {\n        error: true,\n        message: data.message || 'Erreur inconnue'\n      };\n    }\n    return data;\n  } catch (error) {\n    console.error('🚨 Erreur lors de la connexion :', error);\n    return {\n      error: true,\n      message: 'Erreur lors de la connexion.'\n    };\n  }\n};\n\n// Fonction de déconnexion\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('userId');\n};","map":{"version":3,"names":["API_URL","signup","email","password","response","fetch","method","headers","body","JSON","stringify","data","json","ok","console","error","errorMessage","details","map","err","msg","join","message","login","token","logout","localStorage","removeItem"],"sources":["C:/Users/antoi/Downloads/Projet-6-Backend/src/lib/auth.js"],"sourcesContent":["import API_URL from '../config';\n\n// Fonction d'inscription avec gestion des erreurs\nexport const signup = async (email, password) => {\n  try {\n    const response = await fetch(`${API_URL}/auth/signup`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email, password }),\n    });\n\n    const data = await response.json();\n\n    // Vérifie si l'API a renvoyé une erreur\n    if (!response.ok) {\n      console.error('❌ Erreur d\\'inscription :', data);\n\n      // Récupère tous les messages d'erreur dans un tableau\n      const errorMessage = data.details\n        ? data.details.map((err) => err.msg).join(', ') // Concatène les erreurs\n        : data.message; // Si pas de détails, utilise le message général\n\n      return { error: true, message: errorMessage };\n    }\n\n    return data;\n  } catch (error) {\n    console.error('❌ Erreur réseau lors de l\\'inscription:', error.message);\n    return { error: true, message: \"Erreur lors de l'inscription.\" };\n  }\n};\n\n// Fonction de connexion\nexport const login = async (email, password) => {\n  try {\n    const response = await fetch(`${API_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email, password }),\n    });\n\n    const data = await response.json();\n    if (!data.token) {\n      return { error: true, message: data.message || 'Erreur inconnue' };\n    }\n    return data;\n  } catch (error) {\n    console.error('🚨 Erreur lors de la connexion :', error);\n    return { error: true, message: 'Erreur lors de la connexion.' };\n  }\n};\n\n// Fonction de déconnexion\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('userId');\n};\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,WAAW;;AAE/B;AACA,OAAO,MAAMC,MAAM,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAC/C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,cAAc,EAAE;MACrDM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,KAAK;QAAEC;MAAS,CAAC;IAC1C,CAAC,CAAC;IAEF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;;IAElC;IACA,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE;MAChBC,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEJ,IAAI,CAAC;;MAEhD;MACA,MAAMK,YAAY,GAAGL,IAAI,CAACM,OAAO,GAC7BN,IAAI,CAACM,OAAO,CAACC,GAAG,CAAEC,GAAG,IAAKA,GAAG,CAACC,GAAG,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;MAAA,EAC9CV,IAAI,CAACW,OAAO,CAAC,CAAC;;MAElB,OAAO;QAAEP,KAAK,EAAE,IAAI;QAAEO,OAAO,EAAEN;MAAa,CAAC;IAC/C;IAEA,OAAOL,IAAI;EACb,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAACO,OAAO,CAAC;IACvE,OAAO;MAAEP,KAAK,EAAE,IAAI;MAAEO,OAAO,EAAE;IAAgC,CAAC;EAClE;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAOrB,KAAK,EAAEC,QAAQ,KAAK;EAC9C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,aAAa,EAAE;MACpDM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,KAAK;QAAEC;MAAS,CAAC;IAC1C,CAAC,CAAC;IAEF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC,IAAI,CAACD,IAAI,CAACa,KAAK,EAAE;MACf,OAAO;QAAET,KAAK,EAAE,IAAI;QAAEO,OAAO,EAAEX,IAAI,CAACW,OAAO,IAAI;MAAkB,CAAC;IACpE;IACA,OAAOX,IAAI;EACb,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,OAAO;MAAEA,KAAK,EAAE,IAAI;MAAEO,OAAO,EAAE;IAA+B,CAAC;EACjE;AACF,CAAC;;AAED;AACA,OAAO,MAAMG,MAAM,GAAGA,CAAA,KAAM;EAC1BC,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;EAChCD,YAAY,CAACC,UAAU,CAAC,QAAQ,CAAC;AACnC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}